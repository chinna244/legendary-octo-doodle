--procedure to drop Tables

SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE DROP_EXISTING_TABLE(p_table_name IN VARCHAR2) IS
v_control NUMBER(1);
TABLE_DONT_EXIST EXCEPTION;
BEGIN
SELECT COUNT(1) 
  INTO v_control 
  FROM user_tables a
  WHERE UPPER(a.table_name) = UPPER(p_table_name); 
IF v_control >= 1 THEN 
  EXECUTE IMMEDIATE ('DROP TABLE '||p_table_name|| ' cascade constraints');
  dbms_output.put_line('Table deleted successfully.');
  commit;
ELSIF v_control < 1 THEN
    RAISE TABLE_DONT_EXIST;
END IF;
EXCEPTION WHEN TABLE_DONT_EXIST THEN 
DBMS_OUTPUT.PUT_LINE('TABLE OR VIEW WHICH YOU WISH TO DELETE DOES NOT EXIST!!');
END DROP_EXISTING_TABLE; 
/

-- dropping if any tables pre exist in the database with the same names.

execute drop_existing_table('config_table'); 
execute drop_existing_table('INSURANCE_COMPANY'); 
execute drop_existing_table('AGENT'); 
execute drop_existing_table('CORPORATE_CLIENTS'); 
execute drop_existing_table('CUSTOMER'); 
execute drop_existing_table('PATIENT'); 
execute drop_existing_table('TREATMENT'); 
execute drop_existing_table('DOCTOR'); 
execute drop_existing_table('HOSPITAL'); 
execute drop_existing_table('BILL'); 
execute drop_existing_table('CLAIM'); 
execute drop_existing_table('POLICY'); 
execute drop_existing_table('POLICY_CATALOGUE'); 

--table creation

DECLARE
ROW_COUNT NUMBER(10);
CHECK_CONSTRAINT_VIOLATED EXCEPTION;
PRAGMA EXCEPTION_INIT(CHECK_CONSTRAINT_VIOLATED, -2290);
BEGIN 
    SELECT count(*) into ROW_COUNT FROM user_tables where table_name = 'CONFIG_TABLE';
    IF(ROW_COUNT > 0)
    THEN
        DBMS_OUTPUT.PUT_LINE('TABLE CONFIG_TABLE ALREADY EXISTS');
    ELSE
        EXECUTE IMMEDIATE 'CREATE TABLE CONFIG_TABLE
    (
       TABLE_NAME varchar2(50), 
       TABLE_DEF varchar2(3000) NOT NULL, 
       CONSTRAINT CONFIG_TABLE_PK PRIMARY KEY(TABLE_NAME)
    )
    ';    
     DBMS_OUTPUT.PUT_LINE('TABLE CONFIG_TABLE CREATED SUCCESSFULLY');
     
    
    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('INSURANCE_COMPANY',
	'CREATE TABLE INSURANCE_COMPANY
            (   
           COMPANY_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
           COMPANY_NAME VARCHAR2(100) NOT NULL,
           PHONE_NO NUMBER(10),
           STREET VARCHAR2(100),
           CITY VARCHAR2(50),
           STATE VARCHAR2(25),
           ZIPCODE VARCHAR2(6),
           CONSTRAINT INSURANCE_COMPANY_PK PRIMARY KEY(COMPANY_ID)
            )
    ')]';
    
     EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('AGENT','CREATE TABLE AGENT
            (   
           AGENT_ID NUMBER(6) GENERATED BY DEFAULT AS IDENTITY,
           COMPANY_ID NUMBER(10) NOT NULL,
         FIRST_NAME VARCHAR2(20) NOT NULL,
         LAST_NAME VARCHAR2(20)NOT NULL,
         PHONE NUMBER(10)  NOT NULL,
         EMAIL VARCHAR2(50) NOT NULL,
         CONSTRAINT AGENT_PK PRIMARY KEY(AGENT_ID),
         CONSTRAINT AGENT_FK_INSURANCE_COMPANY FOREIGN KEY (COMPANY_ID) REFERENCES INSURANCE_COMPANY(COMPANY_ID)
            )
    ')]';
    
      EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('CORPORATE_CLIENTS','CREATE TABLE CORPORATE_CLIENTS
            (   
            CLIENT_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
            COMPANY_ID NUMBER(10) NOT NULL,
            CLIENT_NAME VARCHAR2(30) NOT NULL,
            TOTAL_EMPLOYEES NUMBER(6) NOT NULL,
            CONSTRAINT CORPORATE_CLIENTS_PK PRIMARY KEY (CLIENT_ID),
            CONSTRAINT CORPRATE_FK_INSURANCE_COMPANY FOREIGN KEY (COMPANY_ID) REFERENCES INSURANCE_COMPANY(COMPANY_ID)
            )
    ')]';





    
    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('POLICY_CATALOGUE','CREATE TABLE POLICY_CATALOGUE
            (
              POLICY_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
              COMPANY_ID NUMBER(10) NOT NULL,
            PREMIUM VARCHAR2(10) NOT NULL,
            COPAY NUMBER(10) NOT NULL,
            TENURE NUMBER(10) NOT NULL,
            CONSTRAINT POLICY_CATALOGUE_PK PRIMARY KEY (POLICY_ID),
            CONSTRAINT POLICy_FK_INSURANCE_COMPANY FOREIGN KEY (COMPANY_ID) REFERENCES INSURANCE_COMPANY(COMPANY_ID)
            )
       ')]';




        EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('CUSTOMER','CREATE TABLE CUSTOMER
            (
            CUSTOMER_ID NUMBER(10)GENERATED BY DEFAULT AS IDENTITY,
AGENT_ID NUMBER(6),
CLIENT_ID NUMBER(10),
FIRST_NAME VARCHAR2(30) NOT NULL,
LAST_NAME VARCHAR2(40) NOT NULL,
SSN NUMBER(9) NOT NULL,
EMAIL VARCHAR2(100) NOT NULL,
STREET_NAME VARCHAR(100) NOT NULL,
CITY VARCHAR2(30) NOT NULL,
STATE VARCHAR2(30) NOT NULL,
ZIPCODE VARCHAR2(6),
CONSTRAINT CUSTOMER_PK PRIMARY KEY (CUSTOMER_ID),
CONSTRAINT EMAIL_VALIDATION CHECK(REGEXP_LIKE(EMAIL,''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'')),
CONSTRAINT CUSTOMER_FK_AGENT FOREIGN KEY (AGENT_ID) REFERENCES AGENT(AGENT_ID),
CONSTRAINT CUSTOMER_FK_CORPORATE_CLIENTS FOREIGN KEY (CLIENT_ID) REFERENCES CORPORATE_CLIENTS(CLIENT_ID)
              
                 )
       ')]';

     
    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('POLICY','CREATE TABLE POLICY
            (
            POLICY_NO NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
            CUSTOMER_ID NUMBER(10) NOT NULL,
            POLICY_ID NUMBER(10) NOT NULL,
            POLICY_EXPIRY_DATE DATE NOT NULL,
            CONSTRAINT POLICY_PK PRIMARY KEY (POLICY_NO),
            CONSTRAINT POLICY_FK_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
            CONSTRAINT POLICY_FK_POLICY_CATALOGUE FOREIGN KEY (POLICY_ID) REFERENCES POLICY_CATALOGUE(POLICY_ID)
    )
    ')]';



        
       




    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('PATIENT','CREATE TABLE PATIENT
            (
             PATIENT_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
            CUSTOMER_ID NUMBER(10) NOT NULL,
            FIRST_NAME VARCHAR2(20) NOT NULL,
            LAST_NAME VARCHAR2(20)NOT NULL,
            RELATIONSHIP VARCHAR2(20)NOT NULL,
            PATIENT_DOB VARCHAR2(20)NOT NULL,
            CONSTRAINT PATIENT_ID PRIMARY KEY (PATIENT_ID),
            CONSTRAINT PATIENT_FK_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
    )
    ')]';
    
       EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('HOSPITAL','CREATE TABLE HOSPITAL
            (
             HOSPITAL_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
HOSPITAL_NAME VARCHAR2(100) NOT NULL,
ADDRESS VARCHAR2(100) NOT NULL,
CITY VARCHAR2(30) NOT NULL,
STATE VARCHAR2(30) NOT NULL,
ZIPCODE VARCHAR2(6) NOT NULL,
CONSTRAINT HOSPITAL_ID PRIMARY KEY (HOSPITAL_ID)
    )
    ')]';
    
     EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('DOCTOR','CREATE TABLE DOCTOR
            (
            
            DOCTOR_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
HOSPITAL_ID NUMBER(10) NOT NULL,
FIRST_NAME VARCHAR2(20) NOT NULL,
LAST_NAME VARCHAR2(20)NOT NULL,
DEPARTMENT VARCHAR2(20)NOT NULL,    
CONSTRAINT DOCTOR_ID PRIMARY KEY (DOCTOR_ID),
CONSTRAINT DOCTOR_FK_HOSPITAL FOREIGN KEY (HOSPITAL_ID) REFERENCES HOSPITAL(HOSPITAL_ID)
             
    )
    ')]';
    
           
    EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('TREATMENT','CREATE TABLE TREATMENT
            (
             TREATMENT_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
            DOCTOR_ID NUMBER(10) NOT NULL,
            PATIENT_ID NUMBER(10) NOT NULL,
            TREATMENT_TYPE VARCHAR2(30) NOT NULL,
            CONSTRAINT TREATMENT_ID PRIMARY KEY (TREATMENT_ID),
            CONSTRAINT TREATMENT_FK_DOCTOR FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTOR(DOCTOR_ID),
            CONSTRAINT TREATMENT_FK_PATIENT FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID)
    )
    ')]';
    
       EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('BILL','CREATE TABLE BILL
            (
             BILL_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
             TREATMENT_ID NUMBER(10) NOT NULL,
             HOSPITAL_ID NUMBER(10) NOT NULL,
             BILL_DATE DATE NOT NULL,
            AMOUNT NUMBER(10) NOT NULL,
            CONSTRAINT BILL_ID PRIMARY KEY (BILL_ID),
            CONSTRAINT BILL_FK_TREATMENT FOREIGN KEY (TREATMENT_ID) REFERENCES TREATMENT(TREATMENT_ID),
            CONSTRAINT BILL_FK_HOSPITAL FOREIGN KEY (HOSPITAL_ID) REFERENCES HOSPITAL(HOSPITAL_ID)
        )
        ')]';
        
      
        
     EXECUTE IMMEDIATE q'[INSERT INTO CONFIG_TABLE VALUES ('CLAIM','CREATE TABLE CLAIM
            (
            CLAIM_ID NUMBER(10) GENERATED BY DEFAULT AS IDENTITY,
            POLICY_NO NUMBER(10) NOT NULL,
            BILL_ID NUMBER(10) NOT NULL,
            CLAIM_AMOUNT NUMBER(10) NOT NULL,
            CLAIM_DATE DATE NOT NULL,
            STATUS VARCHAR2(10) NOT NULL,
            CONSTRAINT CLAIM_ID PRIMARY KEY (CLAIM_ID),
            CONSTRAINT CLAIM_FK_POLICY FOREIGN KEY (POLICY_NO) REFERENCES POLICY(POLICY_NO),
            CONSTRAINT CLAIM_FK_BILL FOREIGN KEY (BILL_ID) REFERENCES BILL(BILL_ID)
            )
             
	PARTITION BY RANGE(claim_amount) 
      ( PARTITION p_100 VALUES LESS THAN (100)
      , PARTITION p_1000 VALUES LESS THAN (1000)
      , PARTITION p_2000 VALUES LESS THAN (2000)
      , PARTITION p_5000 VALUES LESS THAN (5000)
      , PARTITION p_10000 VALUES LESS THAN (10000)
      , PARTITION p_greater_than_10000 VALUES LESS THAN (maxvalue)
      );			 
             )
       ')]';  
    
         
    END IF;
    EXCEPTION
  WHEN CHECK_CONSTRAINT_VIOLATED THEN  -- catch the ORA-02290 exception
   raise_application_error(-20000, 'Failed to update');
    WHEN OTHERS THEN                     -- catch all other exceptions
    DBMS_OUTPUT.PUT_LINE('Something else went wrong - ' || SQLCODE ||
                         ' : ' || SQLERRM);
      
END;
/

DECLARE
        CURSOR config_table_cur
      IS
        SELECT 
            *
        FROM 
            config_table;
            
        tab_name varchar2(50);
        tab_def varchar2(3000);
        row_count number(10):= 0;
    BEGIN
      FOR i IN config_table_cur
      LOOP
          tab_name:= i.table_name;
          tab_def:= i.table_def;
          
          DBMS_OUTPUT.PUT_LINE('--------------------------');
    
          SELECT count(*) into row_count FROM user_tables where table_name = tab_name;
           IF(row_count > 0)
            THEN
                DBMS_OUTPUT.PUT_LINE('TABLE '|| tab_name || ' ALREADY EXISTS');
            ELSE
                DBMS_OUTPUT.PUT_LINE('--------------------------');  
                EXECUTE IMMEDIATE tab_def;
                dbms_output.put_line( 'TABLE '|| tab_name || ' CREATED SUCCESSFULLY!' );
             END IF;
      END LOOP;
      dbms_output.put_line( 'ALL TABLES CREATED');
END;
/ 

SET SERVEROUTPUT ON;

